==67110== Memcheck, a memory error detector
==67110== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==67110== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==67110== Command: ./test_service
==67110== 
==67110== Invalid write of size 1
==67110==    at 0x483F0AC: strcpy (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==67110==    by 0x1095C2: actualizare_NumeMedicament (service.c:81)
==67110==    by 0x10965A: modifElem (service.c:99)
==67110==    by 0x109A6D: test_modifElem (test_service.c:53)
==67110==    by 0x109B57: main (test_service.c:66)
==67110==  Address 0x1fff002938 is not stack'd, malloc'd or (recently) free'd
==67110== 
==67110== 
==67110== Process terminating with default action of signal 11 (SIGSEGV)
==67110==  Access not within mapped region at address 0x1FFF002938
==67110==    at 0x483F0AC: strcpy (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==67110==    by 0x1095C2: actualizare_NumeMedicament (service.c:81)
==67110==    by 0x10965A: modifElem (service.c:99)
==67110==    by 0x109A6D: test_modifElem (test_service.c:53)
==67110==    by 0x109B57: main (test_service.c:66)
==67110==  If you believe this happened as a result of a stack
==67110==  overflow in your program's main thread (unlikely but
==67110==  possible), you can try to increase the size of the
==67110==  main thread stack using the --main-stacksize= flag.
==67110==  The main thread stack size used in this run was 8388608.
==67110== 
==67110== HEAP SUMMARY:
==67110==     in use at exit: 0 bytes in 0 blocks
==67110==   total heap usage: 0 allocs, 0 frees, 0 bytes allocated
==67110== 
==67110== All heap blocks were freed -- no leaks are possible
==67110== 
==67110== For lists of detected and suppressed errors, rerun with: -s
==67110== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
